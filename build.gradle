buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE"
        classpath('io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE')
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.0"
    id "org.asciidoctor.convert" version "1.5.2"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'openlmis-requisition'
    version  = '0.0.1'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-rest"
    compile "org.projectlombok:lombok:1.16.8"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.postgresql:postgresql:9.4.1208"

    testCompile "junit:junit"
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc:1.0.0.RELEASE")
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                configuration.resolve()
            }
            subProject.configurations.each { configuration ->
                configuration.resolve()
            }
        }
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}


asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir "build/asciidoc/html5"
    dependsOn test
    sourceDir 'src/main/asciidoc'
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

flyway {
    url = "jdbc:postgresql://db:5432/open_lmis"
    user = "postgres"
    password = "p@ssw0rd"
    schemas = ['public']
    sqlMigrationPrefix = ''
    placeholderPrefix = '#['
    placeholderSuffix = ']'
}


// Usage: gradle generateMigration [-PmigrationName=name_of_migration]
//          Defaults to 'migration' as migration name
// Example: gradle generateMigration -PmigrationName=add_column_to_users
//          Will create a file in migration folder with name yyyyMMddHHmmssSSS_add_column_to_users.sql.
task generateMigration << {
    description 'Creates an empty new file within the src/main/resources/db/migration directory into which developers can add new SQL migration code.'
    def fileName = project.hasProperty('migrationName') ? migrationName : 'migration'
    def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))
    def fullFileName = "${timestamp}__${fileName}.sql"
    def migrationFile = new File(sourceSets.main.resources.srcDirs.first(),'db/migration/'+fullFileName)
    migrationFile.createNewFile()
}
